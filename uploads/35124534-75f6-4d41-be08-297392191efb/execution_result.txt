
[2025-08-18 03:19:27]
‚úÖ pandas already installed.
----------------------------------------

[2025-08-18 03:19:27]
üìú Executing Code:
import pandas as pd

df = pd.read_csv("sample-sales.csv")
preview = df.head(3).to_string()
with open("uploads/35124534-75f6-4d41-be08-297392191efb/metadata.txt", "w") as f:
    f.write("CSV Preview:\n")
    f.write(preview)

----------------------------------------

[2025-08-18 03:19:31]
‚ùå Execution error:
Traceback (most recent call last):
  File "/home/felicia/TDS_project2/uploads/35124534-75f6-4d41-be08-297392191efb/job_/script.py", line 3, in <module>
    df = pd.read_csv('sample-sales.csv')
  File "/home/felicia/TDS_project2/venv/lib/python3.13/site-packages/pandas/io/parsers/readers.py", line 1026, in read_csv
    return _read(filepath_or_buffer, kwds)
  File "/home/felicia/TDS_project2/venv/lib/python3.13/site-packages/pandas/io/parsers/readers.py", line 620, in _read
    parser = TextFileReader(filepath_or_buffer, **kwds)
  File "/home/felicia/TDS_project2/venv/lib/python3.13/site-packages/pandas/io/parsers/readers.py", line 1620, in __init__
    self._engine = self._make_engine(f, self.engine)
                   ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "/home/felicia/TDS_project2/venv/lib/python3.13/site-packages/pandas/io/parsers/readers.py", line 1880, in _make_engine
    self.handles = get_handle(
                   ~~~~~~~~~~^
        f,
        ^^
    ...<6 lines>...
        storage_options=self.options.get("storage_options", None),
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/home/felicia/TDS_project2/venv/lib/python3.13/site-packages/pandas/io/common.py", line 873, in get_handle
    handle = open(
        handle,
    ...<3 lines>...
        newline="",
    )
FileNotFoundError: [Errno 2] No such file or directory: 'sample-sales.csv'

----------------------------------------

[2025-08-18 03:19:38]
‚úÖ pandas already installed.
----------------------------------------

[2025-08-18 03:19:38]
üìú Executing Code:
import pandas as pd

df = pd.read_csv("uploads/35124534-75f6-4d41-be08-297392191efb/sample-sales.csv")
preview = df.head(3).to_string()
with open("uploads/35124534-75f6-4d41-be08-297392191efb/metadata.txt", "w") as f:
    f.write("CSV Preview:\n")
    f.write(preview)

----------------------------------------

[2025-08-18 03:19:42]
‚úÖ Code executed successfully:

----------------------------------------

[2025-08-18 03:19:59]
‚úÖ pandas already installed.
----------------------------------------

[2025-08-18 03:19:59]
‚úÖ matplotlib already installed.
----------------------------------------

[2025-08-18 03:19:59]
üìú Executing Code:
import pandas as pd
import matplotlib.pyplot as plt
import base64
import io
import json

df = pd.read_csv("uploads/35124534-75f6-4d41-be08-297392191efb/sample-sales.csv")
df["date"] = pd.to_datetime(df["date"])

# 1. Total sales
total_sales = df["sales"].sum()

# 2. Top region
top_region = df.groupby("region")["sales"].sum().idxmax()

# 3. Correlation between day of month and sales
df["day_of_month"] = df["date"].dt.day
day_sales_correlation = df["day_of_month"].corr(df["sales"])

# 4. Bar chart of total sales by region
plt.figure(figsize=(8, 5))
sales_by_region = df.groupby("region")["sales"].sum()
sales_by_region.plot(kind="bar", color="blue")
plt.title("Total Sales by Region")
plt.xlabel("Region")
plt.ylabel("Total Sales")
plt.tight_layout()
buf = io.BytesIO()
plt.savefig(buf, format="png")
plt.close()
buf.seek(0)
bar_chart_base64 = base64.b64encode(buf.read()).decode("utf-8")

# 5. Median sales
median_sales = df["sales"].median()

# 6. Total sales tax
total_sales_tax = total_sales * 0.10

# 7. Cumulative sales chart
df_sorted = df.sort_values("date")
df_sorted["cumulative_sales"] = df_sorted["sales"].cumsum()
plt.figure(figsize=(10, 5))
plt.plot(df_sorted["date"], df_sorted["cumulative_sales"], color="red")
plt.title("Cumulative Sales Over Time")
plt.xlabel("Date")
plt.ylabel("Cumulative Sales")
plt.xticks(rotation=45)
plt.tight_layout()
buf_line = io.BytesIO()
plt.savefig(buf_line, format="png")
plt.close()
buf_line.seek(0)
cumulative_sales_chart_base64 = base64.b64encode(buf_line.read()).decode("utf-8")

# Assemble the final JSON object
result = {
    "total_sales": float(total_sales),
    "top_region": top_region,
    "day_sales_correlation": day_sales_correlation,
    "bar_chart": bar_chart_base64,
    "median_sales": float(median_sales),
    "total_sales_tax": total_sales_tax,
    "cumulative_sales_chart": cumulative_sales_chart_base64,
}

# Save to result.json
with open("uploads/35124534-75f6-4d41-be08-297392191efb/result.json", "w") as f:
    json.dump(result, f, indent=4)

# Append findings to metadata.txt
with open("uploads/35124534-75f6-4d41-be08-297392191efb/metadata.txt", "a") as f:
    f.write("\n--- Analysis Results ---\n")
    f.write(f"Total Sales: {total_sales}\n")
    f.write(f"Top Region: {top_region}\n")
    f.write(f"Day-Sales Correlation: {day_sales_correlation}\n")
    f.write(f"Median Sales: {median_sales}\n")
    f.write(f"Total Sales Tax (10%): {total_sales_tax}\n")

----------------------------------------

[2025-08-18 03:20:09]
‚úÖ Code executed successfully:

----------------------------------------

[2025-08-18 03:20:20]
üìú Executing Code:

----------------------------------------

[2025-08-18 03:20:20]
‚úÖ Code executed successfully:

----------------------------------------
