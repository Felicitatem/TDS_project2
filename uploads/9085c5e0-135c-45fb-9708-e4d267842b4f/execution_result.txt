
[2025-08-18 02:37:43]
✅ duckdb already installed.
----------------------------------------

[2025-08-18 02:37:43]
✅ pandas already installed.
----------------------------------------

[2025-08-18 02:37:43]
✅ scipy already installed.
----------------------------------------

[2025-08-18 02:37:43]
✅ matplotlib already installed.
----------------------------------------

[2025-08-18 02:37:43]
✅ seaborn already installed.
----------------------------------------

[2025-08-18 02:37:44]
📜 Executing Code:
import duckdb
import pandas as pd
from scipy import stats
import matplotlib.pyplot as plt
import seaborn as sns
import io
import base64
import json

# --- Setup ---
DB_PATH = "s3://indian-high-court-judgments/metadata/parquet/year=*/court=*/bench=*/metadata.parquet?s3_region=ap-south-1"
con = duckdb.connect(database=":memory:", read_only=False)
con.execute("INSTALL httpfs; LOAD httpfs;")
con.execute("INSTALL parquet; LOAD parquet;")

# --- Question 1: Which high court disposed the most cases from 2019 - 2022? ---
try:
    most_cases_query = f"""
        SELECT court, COUNT(*) as case_count
        FROM read_parquet('{DB_PATH}')
        WHERE year BETWEEN 2019 AND 2022
        GROUP BY court
        ORDER BY case_count DESC
        LIMIT 1;
    """
    most_cases_result = con.execute(most_cases_query).fetchone()
    high_court_most_cases = most_cases_result[0] if most_cases_result else "N/A"
except Exception as e:
    high_court_most_cases = f"Error: {e}"

with open("uploads/9085c5e0-135c-45fb-9708-e4d267842b4f/metadata.txt", "a") as f:
    f.write(f"High court with most cases (2019-2022): {high_court_most_cases}\n")

# --- Question 2 & 3: Regression slope and plot for court=33_10 ---
try:
    court_33_10_query = f"""
        SELECT decision_date, date_of_registration
        FROM read_parquet('{DB_PATH}')
        WHERE court = '33_10';
    """
    df = con.execute(court_33_10_query).fetchdf()

    # Data cleaning and preparation
    df["decision_date"] = pd.to_datetime(df["decision_date"], errors="coerce")
    df["date_of_registration"] = pd.to_datetime(
        df["date_of_registration"], format="%d-%m-%Y", errors="coerce"
    )
    df.dropna(subset=["decision_date", "date_of_registration"], inplace=True)

    df["delay_days"] = (df["decision_date"] - df["date_of_registration"]).dt.days
    df = df[df["delay_days"] >= 0]
    df["year"] = df["decision_date"].dt.year

    yearly_delay = df.groupby("year")["delay_days"].mean().reset_index()

    slope, intercept, r_value, p_value, std_err = stats.linregress(
        yearly_delay["year"], yearly_delay["delay_days"]
    )

    with open("uploads/9085c5e0-135c-45fb-9708-e4d267842b4f/metadata.txt", "a") as f:
        f.write(f"Regression slope for court 33_10: {slope}\n")

    # Create the plot
    plt.figure(figsize=(8, 5))
    sns.regplot(data=yearly_delay, x="year", y="delay_days", line_kws={"color": "red"})
    plt.title("Yearly Average Delay (Court 33_10)")
    plt.xlabel("Year")
    plt.ylabel("Avg Delay (Days)")
    plt.grid(True)
    plt.tight_layout()

    buf = io.BytesIO()
    plt.savefig(buf, format="webp", quality=70)
    plt.close()
    buf.seek(0)
    base64_image = base64.b64encode(buf.read()).decode("utf-8")
    data_uri = f"data:image/webp;base64,{base64_image}"

    if len(data_uri) > 100000:
        buf = io.BytesIO()
        plt.savefig(buf, format="webp", quality=50)
        plt.close()
        buf.seek(0)
        base64_image = base64.b64encode(buf.read()).decode("utf-8")
        data_uri = f"data:image/webp;base64,{base64_image}"

except Exception as e:
    slope = f"Error: {e}"
    data_uri = f"Error: {e}"

con.close()

# --- Final JSON Output ---
final_answer = {
    "Which high court disposed the most cases from 2019 - 2022?": high_court_most_cases,
    "What's the regression slope of the date_of_registration - decision_date by year in the court=33_10?": slope,
    "Plot the year and # of days of delay from the above question as a scatterplot with a regression line. Encode as a base64 data URI under 100,000 characters": data_uri,
}

with open("uploads/9085c5e0-135c-45fb-9708-e4d267842b4f/result.json", "w") as f:
    json.dump(final_answer, f, indent=2)

----------------------------------------

[2025-08-18 02:40:15]
✅ Code executed successfully:

----------------------------------------

[2025-08-18 02:40:36]
✅ duckdb already installed.
----------------------------------------

[2025-08-18 02:40:36]
✅ pandas already installed.
----------------------------------------

[2025-08-18 02:40:36]
✅ scipy already installed.
----------------------------------------

[2025-08-18 02:40:36]
✅ matplotlib already installed.
----------------------------------------

[2025-08-18 02:40:36]
✅ seaborn already installed.
----------------------------------------

[2025-08-18 02:40:36]
📜 Executing Code:
import duckdb
import pandas as pd
from scipy import stats
import matplotlib.pyplot as plt
import seaborn as sns
import io
import base64
import json

# --- Setup ---
DB_PATH = "s3://indian-high-court-judgments/metadata/parquet/year=*/court=*/bench=*/metadata.parquet?s3_region=ap-south-1"
con = duckdb.connect(database=":memory:", read_only=False)
con.execute("INSTALL httpfs; LOAD httpfs;")
con.execute("INSTALL parquet; LOAD parquet;")

# --- Question 1: Which high court disposed the most cases from 2019 - 2022? ---
try:
    most_cases_query = f"""
        SELECT court, COUNT(*) as case_count
        FROM read_parquet('{DB_PATH}')
        WHERE year BETWEEN 2019 AND 2022
        GROUP BY court
        ORDER BY case_count DESC
        LIMIT 1;
    """
    most_cases_result = con.execute(most_cases_query).fetchone()
    high_court_most_cases = most_cases_result[0] if most_cases_result else "N/A"
except Exception as e:
    high_court_most_cases = f"Error: {e}"


# --- Question 2 & 3: Regression slope and plot for court=33_10 ---
try:
    court_33_10_query = f"""
        SELECT decision_date, date_of_registration
        FROM read_parquet('{DB_PATH}')
        WHERE court = '33_10';
    """
    df = con.execute(court_33_10_query).fetchdf()

    # Data cleaning and preparation
    df["decision_date"] = pd.to_datetime(df["decision_date"], errors="coerce")
    df["date_of_registration"] = pd.to_datetime(
        df["date_of_registration"], format="%d-%m-%Y", errors="coerce"
    )
    df.dropna(subset=["decision_date", "date_of_registration"], inplace=True)

    df["delay_days"] = (df["decision_date"] - df["date_of_registration"]).dt.days
    df = df[df["delay_days"] >= 0]
    df["year"] = df["decision_date"].dt.year

    yearly_delay = df.groupby("year")["delay_days"].mean().reset_index()

    # Ensure there are enough data points for regression
    if len(yearly_delay) < 2:
        raise ValueError("Not enough data points to perform linear regression.")

    slope, intercept, r_value, p_value, std_err = stats.linregress(
        yearly_delay["year"], yearly_delay["delay_days"]
    )

    # Create the plot
    plt.figure(figsize=(8, 5))
    sns.regplot(data=yearly_delay, x="year", y="delay_days", line_kws={"color": "red"})
    plt.title("Yearly Average Delay (Court 33_10)")
    plt.xlabel("Year")
    plt.ylabel("Avg Delay (Days)")
    plt.grid(True)
    plt.tight_layout()

    # Save plot to buffer with a format that supports 'quality' like jpeg
    buf = io.BytesIO()
    plt.savefig(buf, format="jpeg", quality=80)
    plt.close()
    buf.seek(0)
    base64_image = base64.b64encode(buf.read()).decode("utf-8")
    data_uri = f"data:image/jpeg;base64,{base64_image}"

    # Reduce quality if URI is too long
    if len(data_uri) > 100000:
        buf = io.BytesIO()
        plt.figure(figsize=(8, 5))
        sns.regplot(
            data=yearly_delay, x="year", y="delay_days", line_kws={"color": "red"}
        )
        plt.title("Yearly Average Delay (Court 33_10)")
        plt.xlabel("Year")
        plt.ylabel("Avg Delay (Days)")
        plt.grid(True)
        plt.tight_layout()
        plt.savefig(buf, format="jpeg", quality=50)
        plt.close()
        buf.seek(0)
        base64_image = base64.b64encode(buf.read()).decode("utf-8")
        data_uri = f"data:image/jpeg;base64,{base64_image}"

except Exception as e:
    slope = f"Error: {e}"
    data_uri = f"Error: {e}"

con.close()

# --- Final JSON Output ---
final_answer = {
    "Which high court disposed the most cases from 2019 - 2022?": high_court_most_cases,
    "What's the regression slope of the date_of_registration - decision_date by year in the court=33_10?": slope,
    "Plot the year and # of days of delay from the above question as a scatterplot with a regression line. Encode as a base64 data URI under 100,000 characters": data_uri,
}

with open("uploads/9085c5e0-135c-45fb-9708-e4d267842b4f/result.json", "w") as f:
    json.dump(final_answer, f, indent=2)

----------------------------------------

[2025-08-18 02:42:17]
✅ Code executed successfully:

----------------------------------------

[2025-08-18 02:42:36]
✅ duckdb already installed.
----------------------------------------

[2025-08-18 02:42:36]
✅ pandas already installed.
----------------------------------------

[2025-08-18 02:42:36]
✅ scipy already installed.
----------------------------------------

[2025-08-18 02:42:36]
✅ matplotlib already installed.
----------------------------------------

[2025-08-18 02:42:36]
✅ seaborn already installed.
----------------------------------------

[2025-08-18 02:42:36]
📜 Executing Code:
import duckdb
import pandas as pd
from scipy import stats
import matplotlib

matplotlib.use("Agg")
import matplotlib.pyplot as plt
import seaborn as sns
import io
import base64
import json

# --- Setup ---
DB_PATH = "s3://indian-high-court-judgments/metadata/parquet/year=*/court=*/bench=*/metadata.parquet?s3_region=ap-south-1"
con = duckdb.connect(database=":memory:", read_only=False)
con.execute("INSTALL httpfs; LOAD httpfs;")
con.execute("INSTALL parquet; LOAD parquet;")

# --- Question 1: Which high court disposed the most cases from 2019 - 2022? ---
try:
    most_cases_query = f"""
        SELECT court, COUNT(*) as case_count
        FROM read_parquet('{DB_PATH}')
        WHERE year BETWEEN 2019 AND 2022
        GROUP BY court
        ORDER BY case_count DESC
        LIMIT 1;
    """
    most_cases_result = con.execute(most_cases_query).fetchone()
    high_court_most_cases = most_cases_result[0] if most_cases_result else "N/A"
except Exception as e:
    high_court_most_cases = f"Error: {e}"


# --- Question 2 & 3: Regression slope and plot for court=33_10 ---
try:
    court_33_10_query = f"""
        SELECT decision_date, date_of_registration
        FROM read_parquet('{DB_PATH}')
        WHERE court = '33_10';
    """
    df = con.execute(court_33_10_query).fetchdf()

    # Data cleaning and preparation
    df["decision_date"] = pd.to_datetime(df["decision_date"], errors="coerce")
    df["date_of_registration"] = pd.to_datetime(
        df["date_of_registration"], format="%d-%m-%Y", errors="coerce"
    )
    df.dropna(subset=["decision_date", "date_of_registration"], inplace=True)

    df["delay_days"] = (df["decision_date"] - df["date_of_registration"]).dt.days
    df = df[df["delay_days"] >= 0]
    df["year"] = df["decision_date"].dt.year

    yearly_delay = df.groupby("year")["delay_days"].mean().reset_index()

    if len(yearly_delay) < 2:
        raise ValueError("Not enough data points to perform linear regression.")

    slope, intercept, r_value, p_value, std_err = stats.linregress(
        yearly_delay["year"], yearly_delay["delay_days"]
    )

    # Create the plot
    plt.figure(figsize=(8, 5))
    sns.regplot(data=yearly_delay, x="year", y="delay_days", line_kws={"color": "red"})
    plt.title("Yearly Average Delay (Court 33_10)")
    plt.xlabel("Year")
    plt.ylabel("Avg Delay (Days)")
    plt.grid(True)
    plt.tight_layout()

    # Save plot to buffer as PNG (more compatible)
    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    plt.close()
    buf.seek(0)
    base64_image = base64.b64encode(buf.read()).decode("utf-8")
    data_uri = f"data:image/png;base64,{base64_image}"

except Exception as e:
    slope = f"Error: {e}"
    data_uri = f"Error: {e}"

con.close()

# --- Final JSON Output ---
final_answer = {
    "Which high court disposed the most cases from 2019 - 2022?": high_court_most_cases,
    "What's the regression slope of the date_of_registration - decision_date by year in the court=33_10?": slope,
    "Plot the year and # of days of delay from the above question as a scatterplot with a regression line. Encode as a base64 data URI under 100,000 characters": data_uri,
}

with open("uploads/9085c5e0-135c-45fb-9708-e4d2d67842b4f/result.json", "w") as f:
    json.dump(final_answer, f, indent=2)

----------------------------------------

[2025-08-18 02:44:15]
❌ Execution error:
Traceback (most recent call last):
  File "/home/felicia/TDS_project2/uploads/9085c5e0-135c-45fb-9708-e4d267842b4f/job_/script.py", line 89, in <module>
    with open("uploads/9085c5e0-135c-45fb-9708-e4d2d67842b4f/result.json", "w") as f:
         ~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: 'uploads/9085c5e0-135c-45fb-9708-e4d2d67842b4f/result.json'

----------------------------------------

[2025-08-18 02:45:02]
✅ duckdb already installed.
----------------------------------------

[2025-08-18 02:45:02]
✅ pandas already installed.
----------------------------------------

[2025-08-18 02:45:02]
✅ scipy already installed.
----------------------------------------

[2025-08-18 02:45:02]
✅ matplotlib already installed.
----------------------------------------

[2025-08-18 02:45:02]
✅ seaborn already installed.
----------------------------------------

[2025-08-18 02:45:02]
📜 Executing Code:
import duckdb
import pandas as pd
from scipy import stats
import matplotlib

matplotlib.use("Agg")
import matplotlib.pyplot as plt
import seaborn as sns
import io
import base64
import json
import os

# --- Configuration ---
WORKING_DIR = "uploads/9085c5e0-135c-45fb-9708-e4d267842b4f"
RESULT_FILE = os.path.join(WORKING_DIR, "result.json")
DB_PATH = "s3://indian-high-court-judgments/metadata/parquet/year=*/court=*/bench=*/metadata.parquet?s3_region=ap-south-1"

os.makedirs(WORKING_DIR, exist_ok=True)

# --- Initialize variables ---
high_court_most_cases = "N/A"
slope = "N/A"
data_uri = "N/A"

try:
    con = duckdb.connect(database=":memory:", read_only=False)
    con.execute("INSTALL httpfs; LOAD httpfs;")
    con.execute("INSTALL parquet; LOAD parquet;")

    # --- Question 1 ---
    try:
        most_cases_query = f"""            SELECT court, COUNT(*) as case_count
            FROM read_parquet('{DB_PATH}')
            WHERE year BETWEEN 2019 AND 2022
            GROUP BY court
            ORDER BY case_count DESC
            LIMIT 1;        """
        most_cases_result = con.execute(most_cases_query).fetchone()
        high_court_most_cases = most_cases_result[0] if most_cases_result else "N/A"
    except Exception as e:
        high_court_most_cases = f"Error: {str(e)}"

    # --- Question 2 & 3 ---
    try:
        court_33_10_query = f"""            SELECT decision_date, date_of_registration
            FROM read_parquet('{DB_PATH}')
            WHERE court = '33_10';        """
        df = con.execute(court_33_10_query).fetchdf()

        df["decision_date"] = pd.to_datetime(df["decision_date"], errors="coerce")
        df["date_of_registration"] = pd.to_datetime(
            df["date_of_registration"], format="%d-%m-%Y", errors="coerce"
        )
        df.dropna(subset=["decision_date", "date_of_registration"], inplace=True)
        df["delay_days"] = (df["decision_date"] - df["date_of_registration"]).dt.days
        df = df[df["delay_days"] >= 0]
        df["year"] = df["decision_date"].dt.year
        yearly_delay = df.groupby("year")["delay_days"].mean().reset_index()

        if len(yearly_delay) < 2:
            raise ValueError("Not enough data points for regression.")

        slope_val, _, _, _, _ = stats.linregress(
            yearly_delay["year"], yearly_delay["delay_days"]
        )
        slope = slope_val

        plt.figure(figsize=(8, 5))
        sns.regplot(
            data=yearly_delay, x="year", y="delay_days", line_kws={"color": "red"}
        )
        plt.title("Yearly Average Delay (Court 33_10)")
        plt.xlabel("Year")
        plt.ylabel("Avg Delay (Days)")
        plt.grid(True)
        plt.tight_layout()

        buf = io.BytesIO()
        plt.savefig(buf, format="png")
        plt.close()
        buf.seek(0)
        base64_image = base64.b64encode(buf.read()).decode("utf-8")
        data_uri = f"data:image/png;base64,{base64_image}"

    except Exception as e:
        error_message = f"Error: {str(e)}"
        if slope == "N/A":
            slope = error_message
        if data_uri == "N/A":
            data_uri = error_message

    con.close()

except Exception as e:
    error_message = f"Error: {str(e)}"
    high_court_most_cases = error_message
    slope = error_message
    data_uri = error_message

# --- Final JSON Output ---
final_answer = {
    "Which high court disposed the most cases from 2019 - 2022?": high_court_most_cases,
    "What's the regression slope of the date_of_registration - decision_date by year in the court=33_10?": slope,
    "Plot the year and # of days of delay from the above question as a scatterplot with a regression line. Encode as a base64 data URI under 100,000 characters": data_uri,
}

with open(RESULT_FILE, "w") as f:
    json.dump(final_answer, f, indent=2)

----------------------------------------

[2025-08-18 02:46:55]
✅ Code executed successfully:

----------------------------------------

[2025-08-18 02:47:06]
📜 Executing Code:

----------------------------------------

[2025-08-18 02:47:06]
✅ Code executed successfully:

----------------------------------------
